/*
 * This file is part of Micro:fast.
 *
 * Copyright (C) 2025 Pythom1234
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>.
 */

#pragma once
#include "types.h"

namespace Peripheral {
typedef volatile struct {
  u32 RESERVED0[321];
  u32 OUT;
  u32 OUTSET;
  u32 OUTCLR;
  u32 IN;
  u32 DIR;
  u32 DIRSET;
  u32 DIRCLR;
  u32 LATCH;
  u32 DETECTMODE;
  u32 RESERVED1[118];
  u32 PIN_CNF[32];
} GPIO_Type;

typedef volatile struct {
  u32 TASKS_STARTRX;
  u32 TASKS_STOPRX;
  u32 TASKS_STARTTX;
  u32 TASKS_STOPTX;
  u32 RESERVED0[3];
  u32 TASKS_SUSPEND;
  u32 RESERVED1[56];
  u32 EVENTS_CTS;
  u32 EVENTS_NCTS;
  u32 EVENTS_RXDRDY;
  u32 RESERVED2[4];
  u32 EVENTS_TXDRDY;
  u32 RESERVED3;
  u32 EVENTS_ERROR;
  u32 RESERVED4[7];
  u32 EVENTS_RXTO;
  u32 RESERVED5[46];
  u32 SHORTS;
  u32 RESERVED6[64];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED7[93];
  u32 ERRORSRC;
  u32 RESERVED8[31];
  u32 ENABLE;
  u32 RESERVED9;
  struct {
    u32 RTS;
    u32 TXD;
    u32 CTS;
    u32 RXD;
  } PSEL;
  u32 RXD;
  u32 TXD;
  u32 RESERVED10;
  u32 BAUDRATE;
  u32 RESERVED11[17];
  u32 CONFIG;
} UART_Type;

typedef volatile struct {
  u32 TASKS_STARTRX;
  u32 TASKS_STOPRX;
  u32 TASKS_STARTTX;
  u32 TASKS_STOPTX;
  u32 RESERVED0[7];
  u32 TASKS_FLUSHRX;
  u32 RESERVED1[52];
  u32 EVENTS_CTS;
  u32 EVENTS_NCTS;
  u32 EVENTS_RXDRDY;
  u32 RESERVED2;
  u32 EVENTS_ENDRX;
  u32 RESERVED3[2];
  u32 EVENTS_TXDRDY;
  u32 EVENTS_ENDTX;
  u32 EVENTS_ERROR;
  u32 RESERVED4[7];
  u32 EVENTS_RXTO;
  u32 RESERVED5;
  u32 EVENTS_RXSTARTED;
  u32 EVENTS_TXSTARTED;
  u32 RESERVED6;
  u32 EVENTS_TXSTOPPED;
  u32 RESERVED7[41];
  u32 SHORTS;
  u32 RESERVED8[63];
  u32 INTEN;
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED9[93];
  u32 ERRORSRC;
  u32 RESERVED10[31];
  u32 ENABLE;
  u32 RESERVED11;
  struct {
    u32 RTS;
    u32 TXD;
    u32 CTS;
    u32 RXD;
  } PSEL;
  u32 RESERVED12[3];
  u32 BAUDRATE;
  u32 RESERVED13[3];
  struct {
    u32 PTR;
    u32 MAXCNT;
    u32 AMOUNT;
  } RXD;
  u32 RESERVED14;
  struct {
    u32 PTR;
    u32 MAXCNT;
    u32 AMOUNT;
  } TXD;
  u32 RESERVED15[7];
  u32 CONFIG;
} UARTE_Type;

typedef volatile struct {
  u32 TASKS_START;
  u32 TASKS_STOP;
  u32 RESERVED0[62];
  u32 EVENTS_VALRDY;
  u32 RESERVED1[63];
  u32 SHORTS;
  u32 RESERVED2[64];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED3[126];
  u32 CONFIG;
  u32 VALUE;
} RNG_Type;

typedef volatile struct {
  u32 TASKS_START;
  u32 TASKS_STOP;
  u32 TASKS_COUNT;
  u32 TASKS_CLEAR;
  u32 TASKS_SHUTDOWN;
  u32 RESERVED0[11];
  u32 TASKS_CAPTURE[6];
  u32 RESERVED1[58];
  u32 EVENTS_COMPARE[6];
  u32 RESERVED2[42];
  u32 SHORTS;
  u32 RESERVED3[64];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED4[126];
  u32 MODE;
  u32 BITMODE;
  u32 RESERVED5;
  u32 PRESCALER;
  u32 RESERVED6[11];
  u32 CC[6];
} TIMER_Type;

typedef volatile struct {
  u32 TASKS_START;
  u32 TASKS_STOP;
  u32 TASKS_CLEAR;
  u32 TASKS_TRIGOVRFLW;
  u32 RESERVED0[60];
  u32 EVENTS_TICK;
  u32 EVENTS_OVRFLW;
  u32 RESERVED1[14];
  u32 EVENTS_COMPARE[4];
  u32 RESERVED2[109];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED3[13];
  u32 EVTEN;
  u32 EVTENSET;
  u32 EVTENCLR;
  u32 RESERVED4[110];
  u32 COUNTER;
  u32 PRESCALER;
  u32 RESERVED5[13];
  u32 CC[4];
} RTC_Type;

typedef volatile struct {
  u32 TASKS_START;
  u32 TASKS_SAMPLE;
  u32 TASKS_STOP;
  u32 TASKS_CALIBRATEOFFSET;
  u32 RESERVED0[60];
  u32 EVENTS_STARTED;
  u32 EVENTS_END;
  u32 EVENTS_DONE;
  u32 EVENTS_RESULTDONE;
  u32 EVENTS_CALIBRATEDONE;
  u32 EVENTS_STOPPED;
  struct {
    u32 LIMITL;
    u32 LIMITH;
  } EVENTS_CH[8];
  u32 RESERVED1[106];
  u32 INTEN;
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED2[61];
  u32 STATUS;
  u32 RESERVED3[63];
  u32 ENABLE;
  u32 RESERVED4[3];
  struct {
    u32 PSELP;
    u32 PSELN;
    u32 CONFIG;
    u32 LIMIT;
  } CH[8];
  u32 RESERVED5[24];
  u32 RESOLUTION;
  u32 OVERSAMPLE;
  u32 SAMPLERATE;
  u32 RESERVED6[12];
  struct {
    u32 PTR;
    u32 MAXCNT;
    u32 AMOUNT;
  } RESULT;
} SAADC_Type;

typedef volatile struct {
  u32 RESERVED0;
  u32 TASKS_STOP;
  u32 TASKS_SEQSTART[2];
  u32 TASKS_NEXTSTEP;
  u32 RESERVED1[60];
  u32 EVENTS_STOPPED;
  u32 EVENTS_SEQSTARTED[2];
  u32 EVENTS_SEQEND[2];
  u32 EVENTS_PWMPERIODEND;
  u32 EVENTS_LOOPSDONE;
  u32 RESERVED2[56];
  u32 SHORTS;
  u32 RESERVED3[63];
  u32 INTEN;
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED4[125];
  u32 ENABLE;
  u32 MODE;
  u32 COUNTERTOP;
  u32 PRESCALER;
  u32 DECODER;
  u32 LOOP;
  u32 RESERVED5[2];
  struct {
    u32 PTR;
    u32 CNT;
    u32 REFRESH;
    u32 ENDDELAY;
    u32 RESERVED[4];
  } SEQ[2];
  struct {
    u32 OUT[4];
  } PSEL;
} PWM_Type;

typedef volatile struct {
  u32 TASKS_START;
  u32 TASKS_STOP;
  u32 RESERVED0[62];
  u32 EVENTS_DATARDY;
  u32 RESERVED1[128];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED2[127];
  i32 TEMP;
  u32 RESERVED3[5];
  u32 A0;
  u32 A1;
  u32 A2;
  u32 A3;
  u32 A4;
  u32 A5;
  u32 RESERVED4[2];
  u32 B0;
  u32 B1;
  u32 B2;
  u32 B3;
  u32 B4;
  u32 B5;
  u32 RESERVED5[2];
  u32 T0;
  u32 T1;
  u32 T2;
  u32 T3;
  u32 T4;
} TEMP_Type;

typedef volatile struct {
  u32 TASKS_STARTRX;
  u32 RESERVED0;
  u32 TASKS_STARTTX;
  u32 RESERVED1[2];
  u32 TASKS_STOP;
  u32 RESERVED2;
  u32 TASKS_SUSPEND;
  u32 TASKS_RESUME;
  u32 RESERVED3[56];
  u32 EVENTS_STOPPED;
  u32 RESERVED4[7];
  u32 EVENTS_ERROR;
  u32 RESERVED5[8];
  u32 EVENTS_SUSPENDED;
  u32 EVENTS_RXSTARTED;
  u32 EVENTS_TXSTARTED;
  u32 RESERVED6[2];
  u32 EVENTS_LASTRX;
  u32 EVENTS_LASTTX;
  u32 RESERVED7[39];
  u32 SHORTS;
  u32 RESERVED8[63];
  u32 INTEN;
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED9[110];
  u32 ERRORSRC;
  u32 RESERVED10[14];
  u32 ENABLE;
  u32 RESERVED11;
  struct {
    u32 SCL;
    u32 SDA;
  } PSEL;
  u32 RESERVED12[5];
  u32 FREQUENCY;
  u32 RESERVED13[3];
  struct {
    u32 PTR;
    u32 MAXCNT;
    u32 AMOUNT;
    u32 LIST;
  } RXD;
  struct {
    u32 PTR;
    u32 MAXCNT;
    u32 AMOUNT;
    u32 LIST;
  } TXD;
  u32 RESERVED14[13];
  u32 ADDRESS;
} TWIM_Type;

typedef volatile struct {
  u32 TASKS_STARTRX;
  u32 RESERVED0;
  u32 TASKS_STARTTX;
  u32 RESERVED1[2];
  u32 TASKS_STOP;
  u32 RESERVED2;
  u32 TASKS_SUSPEND;
  u32 TASKS_RESUME;
  u32 RESERVED3[56];
  u32 EVENTS_STOPPED;
  u32 EVENTS_RXDREADY;
  u32 RESERVED4[4];
  u32 EVENTS_TXDSENT;
  u32 RESERVED5;
  u32 EVENTS_ERROR;
  u32 RESERVED6[4];
  u32 EVENTS_BB;
  u32 RESERVED7[3];
  u32 EVENTS_SUSPENDED;
  u32 RESERVED8[45];
  u32 SHORTS;
  u32 RESERVED9[64];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED10[110];
  u32 ERRORSRC;
  u32 RESERVED11[14];
  u32 ENABLE;
  u32 RESERVED12;
  struct {
    u32 SCL;
    u32 SDA;
  } PSEL;
  u32 RESERVED13[2];
  u32 RXD;
  u32 TXD;
  u32 RESERVED14;
  u32 FREQUENCY;
  u32 RESERVED15[24];
  u32 ADDRESS;
} TWI_Type;

typedef volatile struct {
  u32 TASKS_TXEN;
  u32 TASKS_RXEN;
  u32 TASKS_START;
  u32 TASKS_STOP;
  u32 TASKS_DISABLE;
  u32 TASKS_RSSISTART;
  u32 TASKS_RSSISTOP;
  u32 TASKS_BCSTART;
  u32 TASKS_BCSTOP;
  u32 TASKS_EDSTART;
  u32 TASKS_EDSTOP;
  u32 TASKS_CCASTART;
  u32 TASKS_CCASTOP;
  u32 RESERVED0[51];
  u32 EVENTS_READY;
  u32 EVENTS_ADDRESS;
  u32 EVENTS_PAYLOAD;
  u32 EVENTS_END;
  u32 EVENTS_DISABLED;
  u32 EVENTS_DEVMATCH;
  u32 EVENTS_DEVMISS;
  u32 EVENTS_RSSIEND;
  u32 RESERVED1[2];
  u32 EVENTS_BCMATCH;
  u32 RESERVED2;
  u32 EVENTS_CRCOK;
  u32 EVENTS_CRCERROR;
  u32 EVENTS_FRAMESTART;
  u32 EVENTS_EDEND;
  u32 EVENTS_EDSTOPPED;
  u32 EVENTS_CCAIDLE;
  u32 EVENTS_CCABUSY;
  u32 EVENTS_CCASTOPPED;
  u32 EVENTS_RATEBOOST;
  u32 EVENTS_TXREADY;
  u32 EVENTS_RXREADY;
  u32 EVENTS_MHRMATCH;
  u32 RESERVED3[2];
  u32 EVENTS_SYNC;
  u32 EVENTS_PHYEND;
  u32 EVENTS_CTEPRESENT;
  u32 RESERVED4[35];
  u32 SHORTS;
  u32 RESERVED5[64];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED6[61];
  u32 CRCSTATUS;
  u32 RESERVED7;
  u32 RXMATCH;
  u32 RXCRC;
  u32 DAI;
  u32 PDUSTAT;
  u32 RESERVED8[13];
  u32 CTESTATUS;
  u32 RESERVED9[2];
  u32 DFESTATUS;
  u32 RESERVED10[42];
  u32 PACKETPTR;
  u32 FREQUENCY;
  u32 TXPOWER;
  u32 MODE;
  u32 PCNF0;
  u32 PCNF1;
  u32 BASE0;
  u32 BASE1;
  u32 PREFIX0;
  u32 PREFIX1;
  u32 TXADDRESS;
  u32 RXADDRESSES;
  u32 CRCCNF;
  u32 CRCPOLY;
  u32 CRCINIT;
  u32 RESERVED11;
  u32 TIFS;
  u32 RSSISAMPLE;
  u32 RESERVED12;
  u32 STATE;
  u32 DATAWHITEIV;
  u32 RESERVED13[2];
  u32 BCC;
  u32 RESERVED14[39];
  u32 DAB[8];
  u32 DAP[8];
  u32 DACNF;
  u32 MHRMATCHCONF;
  u32 MHRMATCHMAS;
  u32 RESERVED15;
  u32 MODECNF0;
  u32 RESERVED16[3];
  u32 SFD;
  u32 EDCNT;
  u32 EDSAMPLE;
  u32 CCACTRL;
  u32 RESERVED17[164];
  u32 DFEMODE;
  u32 CTEINLINECONF;
  u32 RESERVED18[2];
  u32 DFECTRL1;
  u32 DFECTRL2;
  u32 RESERVED19[4];
  u32 SWITCHPATTERN;
  u32 CLEARPATTERN;
  struct {
    u32 DFEGPIO[8];
  } PSEL;
  struct {
    u32 PTR;
    u32 MAXCNT;
    u32 AMOUNT;
  } DFEPACKET;
  u32 RESERVED20[424];
  u32 POWER;
} RADIO_Type;

typedef volatile struct {
  u32 TASKS_HFCLKSTART;
  u32 TASKS_HFCLKSTOP;
  u32 TASKS_LFCLKSTART;
  u32 TASKS_LFCLKSTOP;
  u32 TASKS_CAL;
  u32 TASKS_CTSTART;
  u32 TASKS_CTSTOP;
  u32 RESERVED0[57];
  u32 EVENTS_HFCLKSTARTED;
  u32 EVENTS_LFCLKSTARTED;
  u32 RESERVED1;
  u32 EVENTS_DONE;
  u32 EVENTS_CTTO;
  u32 RESERVED2[5];
  u32 EVENTS_CTSTARTED;
  u32 EVENTS_CTSTOPPED;
  u32 RESERVED3[117];
  u32 INTENSET;
  u32 INTENCLR;
  u32 RESERVED4[63];
  u32 HFCLKRUN;
  u32 HFCLKSTAT;
  u32 RESERVED5;
  u32 LFCLKRUN;
  u32 LFCLKSTAT;
  u32 LFCLKSRCCOPY;
  u32 RESERVED6[62];
  u32 LFCLKSRC;
  u32 RESERVED7[3];
  u32 HFXODEBOUNCE;
  u32 LFXODEBOUNCE;
  u32 RESERVED8[2];
  u32 CTIV;
  u32 RESERVED9[8];
  u32 TRACECONFIG;
} CLOCK_Type;

typedef volatile struct {
  u32 ISER[8];
  u32 RESERVED0[24];
  u32 ICER[8];
  u32 RSERVED1[24];
  u32 ISPR[8];
  u32 RESERVED2[24];
  u32 ICPR[8];
  u32 RESERVED3[24];
  u32 IABR[8];
  u32 RESERVED4[56];
  u8 IP[240];
  u32 RESERVED5[644];
  u32 STIR;
} NVIC_Type;

GPIO_Type* const P0 = (GPIO_Type*)0x50000000;
GPIO_Type* const P1 = (GPIO_Type*)0x50000300;
UART_Type* const UART = (UART_Type*)0x40002000;
UARTE_Type* const UARTE0 = (UARTE_Type*)0x40002000;
UARTE_Type* const UARTE1 = (UARTE_Type*)0x40028000;
RNG_Type* const RNG = (RNG_Type*)0x4000D000;
TIMER_Type* const TIMER0 = (TIMER_Type*)0x40008000; // for `wait` function
TIMER_Type* const TIMER1 = (TIMER_Type*)0x40009000; // for internal functions
TIMER_Type* const TIMER2 = (TIMER_Type*)0x4000A000; // for `micros` function
TIMER_Type* const TIMER3 = (TIMER_Type*)0x4001A000;
TIMER_Type* const TIMER4 = (TIMER_Type*)0x4001B000; // for `runAfter` function
RTC_Type* const RTC0 = (RTC_Type*)0x4000B000;
RTC_Type* const RTC1 = (RTC_Type*)0x40011000;
RTC_Type* const RTC2 = (RTC_Type*)0x40024000; // for `millis` function
CLOCK_Type* const CLOCK = (CLOCK_Type*)0x40000000;
SAADC_Type* const SAADC = (SAADC_Type*)0x40007000;
PWM_Type* const PWM0 = (PWM_Type*)0x4001C000;
PWM_Type* const PWM1 = (PWM_Type*)0x40021000;
PWM_Type* const PWM2 = (PWM_Type*)0x40022000;
PWM_Type* const PWM3 = (PWM_Type*)0x4002D000;
TEMP_Type* const TEMP = (TEMP_Type*)0x4000C000;
TWIM_Type* const TWIM0 = (TWIM_Type*)0x40003000; // external i2c
TWIM_Type* const TWIM1 = (TWIM_Type*)0x40004000; // internal i2c
TWI_Type* const TWI0 = (TWI_Type*)0x40003000;
TWI_Type* const TWI1 = (TWI_Type*)0x40004000;
RADIO_Type* const RADIO = (RADIO_Type*)0x40001000;

GPIO_Type* const P[2] = {P0, P1};
UARTE_Type* const UARTE[2] = {UARTE0, UARTE1};
TIMER_Type* const TIMER[5] = {TIMER0, TIMER1, TIMER2, TIMER3, TIMER4};
RTC_Type* const RTC[3] = {RTC0, RTC1, RTC2};
PWM_Type* const PWM[4] = {PWM0, PWM1, PWM2, PWM3};
TWIM_Type* const TWIM[2] = {TWIM0, TWIM1};
TWI_Type* const TWI[2] = {TWI0, TWI1};

NVIC_Type* const NVIC = (NVIC_Type*)0xE000E100;

} // namespace Peripheral

namespace Pin {
const u8 PIN_0 = 2;
const u8 PIN_1 = 3;
const u8 PIN_2 = 4;
const u8 PIN_3 = 31;
const u8 PIN_4 = 28;
const u8 PIN_5 = 14;
const u8 PIN_6 = 37;
const u8 PIN_7 = 11;
const u8 PIN_8 = 10;
const u8 PIN_9 = 9;
const u8 PIN_10 = 30;
const u8 PIN_11 = 23;
const u8 PIN_12 = 12;
const u8 PIN_13 = 17;
const u8 PIN_14 = 1;
const u8 PIN_15 = 13;
const u8 PIN_16 = 34;
const u8 PIN_19 = 26;
const u8 PIN_20 = 32;

const u8 BUTTON_A = 14;
const u8 BUTTON_B = 23;
const u8 LOGO = 36;

const u8 RUN_MIC = 20;
const u8 MIC_IN = 5;
const u8 SPEAKER = 0;

const u8 UART_TX = 6;
const u8 UART_RX = 40;

const u8 I2C_INT_SCL = 8;
const u8 I2C_INT_SDA = 16;
const u8 SENSOR_DATA_READY = 25;
const u8 I2C_SCL = 26;
const u8 I2C_SDA = 32;

const u8 SPI_MOSI = 13;
const u8 SPI_MISO = 1;
const u8 SPI_SCK = 17;

const u8 ROW_1 = 21;
const u8 ROW_2 = 22;
const u8 ROW_3 = 15;
const u8 ROW_4 = 24;
const u8 ROW_5 = 19;

const u8 COL_1 = 28;
const u8 COL_2 = 11;
const u8 COL_3 = 31;
const u8 COL_4 = 37;
const u8 COL_5 = 30;
} // namespace Pin
