/*
 * This file is part of Micro:fast.
 *
 * Copyright (C) 2025 Pythom1234
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>.
 */

#pragma once
#include "microbit.h"
namespace oled {
const unsigned char ADDR = 0x3C;
inline unsigned char screen[1025];
inline void cmd1(char c1) {
  microbit::i2c::writeBuffer(ADDR, (unsigned char[2]){0x00, c1}, 2);
}
inline void cmd2(char c1, char c2) {
  microbit::i2c::writeBuffer(ADDR, (unsigned char[3]){0x00, c1, c2}, 3);
}
inline void cmd3(char c1, char c2, char c3) {
  microbit::i2c::writeBuffer(ADDR, (unsigned char[4]){0x00, c1, c2, c3}, 4);
}
inline void setContrast(char contrast) {
  cmd2(0x81, contrast);
}
inline void clear(int color = 0) {
  for (int i = 0; i < 1025; i++) {
    screen[i] = (color) ? 0xFF : 0x00;
  }
}
inline void draw() {
  cmd1(0xB0);
  cmd1(0x00);
  cmd1(0x10);
  screen[0] = 0x40;
  microbit::i2c::writeBuffer(ADDR, screen, 1025);
}
inline void init() {
  cmd1(0xAE);

  cmd2(0x81, 0xFF);
  cmd1(0xA4);
  cmd1(0xA6);
  cmd1(0x2E);
  cmd1(0x00);
  cmd1(0x10);
  cmd2(0x20, 0x00);
  cmd3(0x21, 0x00, 0x7F);
  cmd3(0x22, 0x00, 0x3F);
  cmd1(0xB0);
  cmd1(0x40);
  cmd1(0xA1);
  cmd2(0xA8, 0x3F);
  cmd1(0xC8);
  cmd2(0xD3, 0x00);
  cmd2(0xDA, 0x12);
  cmd2(0xD5, 0xF0);
  cmd2(0xD9, 0xF1);
  cmd2(0xDB, 0x20);
  cmd2(0x8D, 0x14);
  cmd2(0xD6, 0x00);

  cmd1(0xAF);

  clear(0);
  draw();
}
inline void setPixel(int x, int y, int color) {
  if ((x > -1) && (x < 128) && (y > -1) && (y < 64)) {
    int index = ((y / 8) * 128) + x + 1;
    screen[index] = color ? screen[index] | (1 << (y % 8))
                          : screen[index] & ~(1 << (y % 8));
  }
}
inline int getPixel(int x, int y) {
  if ((x > -1) && (x < 128) && (y > -1) && (y < 64)) {
    int index = ((y / 8) * 128) + x + 1;
    return screen[index] & (1 << (y % 8)) ? 1 : 0;
  }
  return 0;
}
inline void togglePixel(int x, int y) {
  if ((x > -1) && (x < 128) && (y > -1) && (y < 64)) {
    int index = ((y / 8) * 128) + x + 1;
    screen[index] = !getPixel(x, y) ? screen[index] | (1 << (y % 8))
                                    : screen[index] & ~(1 << (y % 8));
  }
}
inline void drawRect(int x1, int y1, int x2, int y2, int color = 1,
                     int fill = 0, int toggle = 0) {
  if (fill) {
    for (int x = x1; x <= x2; x++) {
      for (int y = y1; y <= y2; y++) {
        if (toggle) {
          togglePixel(x, y);
        } else {
          setPixel(x, y, color);
        }
      }
    }
  } else {
    for (int x = x1; x <= x2; x++) {
      if (toggle) {
        togglePixel(x, y1);
      } else {
        setPixel(x, y1, color);
      }
    }
    for (int y = y1 + 1; y < y2; y++) {
      if (toggle) {
        togglePixel(x1, y);
      } else {
        setPixel(x1, y, color);
      }
    }
    for (int x = x1; x <= x2; x++) {
      if (toggle) {
        togglePixel(x, y2);
      } else {
        setPixel(x, y2, color);
      }
    }
    for (int y = y1 + 1; y < y2; y++) {
      if (toggle) {
        togglePixel(x2, y);
      } else {
        setPixel(x2, y, color);
      }
    }
  }
}
inline void drawLine(int x1, int y1, int x2, int y2, int color = 1,
                     int toggle = 0) {
  int dx = std::abs(x2 - x1);
  int dy = std::abs(y2 - y1);
  int sx = (x1 < x2) ? 1 : -1;
  int sy = (y1 < y2) ? 1 : -1;
  int err = dx - dy;
  while (1) {
    if (toggle) {
      togglePixel(x1, y1);
    } else {
      setPixel(x1, y1, color);
    }
    if (x1 == x2 && y1 == y2)
      break;
    int err2 = 2 * err;
    if (err2 > -dy) {
      err -= dy;
      x1 += sx;
    }
    if (err2 < dx) {
      err += dx;
      y1 += sy;
    }
  }
}
inline void drawText(const char* text, int x, int y, int color = 1,
                     int toggle = 0) {
  unsigned char font[95][11] = {
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x24, 0x24, 0x7E, 0x24, 0x7E, 0x24, 0x24, 0x00, 0x00, 0x00},
      {0x00, 0x08, 0x1C, 0x2A, 0x18, 0x0C, 0x2A, 0x1C, 0x08, 0x00, 0x00},
      {0x00, 0x24, 0x5C, 0x28, 0x08, 0x10, 0x14, 0x2A, 0x24, 0x00, 0x00},
      {0x00, 0x10, 0x28, 0x28, 0x10, 0x2A, 0x44, 0x44, 0x3A, 0x00, 0x00},
      {0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x00},
      {0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x00},
      {0x00, 0x08, 0x2A, 0x1C, 0x1C, 0x2A, 0x08, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x20, 0x20, 0x00},
      {0x00, 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x02, 0x0C, 0x02, 0x02, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x04, 0x0C, 0x14, 0x14, 0x24, 0x3E, 0x04, 0x04, 0x00, 0x00},
      {0x00, 0x3E, 0x20, 0x20, 0x3C, 0x22, 0x02, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x0C, 0x10, 0x20, 0x3C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x3E, 0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x22, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x22, 0x22, 0x1E, 0x02, 0x04, 0x18, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x20, 0x00},
      {0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00},
      {0x00, 0x38, 0x44, 0x08, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x4E, 0x52, 0x52, 0x4E, 0x40, 0x3C, 0x00, 0x00},
      {0x00, 0x18, 0x24, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x40, 0x40, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00},
      {0x00, 0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20, 0x3E, 0x00, 0x00},
      {0x00, 0x3E, 0x20, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x40, 0x4E, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x00, 0x1E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00, 0x00},
      {0x00, 0x22, 0x24, 0x28, 0x30, 0x30, 0x28, 0x24, 0x22, 0x00, 0x00},
      {0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E, 0x00, 0x00},
      {0x00, 0x41, 0x63, 0x55, 0x55, 0x49, 0x49, 0x41, 0x41, 0x00, 0x00},
      {0x00, 0x42, 0x62, 0x52, 0x52, 0x4A, 0x4A, 0x46, 0x42, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x52, 0x4A, 0x3C, 0x02, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x40, 0x3C, 0x02, 0x02, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x41, 0x41, 0x41, 0x49, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00},
      {0x00, 0x63, 0x22, 0x14, 0x08, 0x08, 0x14, 0x22, 0x63, 0x00, 0x00},
      {0x00, 0x41, 0x41, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x7E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x7E, 0x00, 0x00},
      {0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1C, 0x00},
      {0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x00},
      {0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00},
      {0x00, 0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00},
      {0x08, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x02, 0x3E, 0x42, 0x42, 0x3D, 0x00, 0x00},
      {0x00, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x02, 0x02, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x3E, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x0E, 0x10, 0x10, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x00, 0x04, 0x38, 0x44, 0x44, 0x38, 0x40, 0x3C, 0x42, 0x3C},
      {0x00, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x08, 0x08, 0x00, 0x38, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x04, 0x04, 0x00, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38},
      {0x00, 0x40, 0x40, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00, 0x00},
      {0x00, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x76, 0x49, 0x49, 0x49, 0x41, 0x41, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40},
      {0x00, 0x00, 0x00, 0x3E, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x02},
      {0x00, 0x00, 0x00, 0x6E, 0x32, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x3C, 0x02, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x10, 0x10, 0x3C, 0x10, 0x10, 0x10, 0x12, 0x0C, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x41, 0x41, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x66, 0x24, 0x18, 0x18, 0x24, 0x66, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x63, 0x22, 0x22, 0x14, 0x0C, 0x08, 0x48, 0x30},
      {0x00, 0x00, 0x00, 0x7E, 0x04, 0x08, 0x10, 0x20, 0x7E, 0x00, 0x00},
      {0x0C, 0x10, 0x10, 0x08, 0x30, 0x08, 0x10, 0x10, 0x10, 0x0C, 0x00},
      {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00},
      {0x30, 0x08, 0x08, 0x10, 0x0C, 0x10, 0x08, 0x08, 0x08, 0x30, 0x00},
      {0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}};
  int line = 0;
  int lineStart = 0;
  for (int i = 0; text[i] != '\0'; i++) {
    if (text[i] == '\n') {
      line++;
      lineStart = i + 1;
    } else {
      for (int j = 0; j < 11; j++) {
        for (int k = 0; k < 8; k++) {
          if (font[text[i] - 32][j] & (0x01 << k)) {
            if (toggle) {
              togglePixel(x + ((i - lineStart) * 8) + (8 - k),
                          y + (line * 10) + j);
            } else {
              setPixel(x + ((i - lineStart) * 8) + (8 - k), y + (line * 10) + j,
                       color);
            }
          }
        }
      }
    }
  }
}
} // namespace oled
namespace oleda {
const unsigned char ADDR = 0x3C;
inline unsigned char screen[1025];
inline void cmd1(char c1) {
  microbit::i2c::writeBuffer(ADDR, (unsigned char[2]){0x0, c1}, 2);
}
inline void cmd2(char c1, char c2) {
  microbit::i2c::writeBuffer(ADDR, (unsigned char[3]){0x0, c1, c2}, 3);
}
inline void cmd3(char c1, char c2, char c3) {
  microbit::i2c::writeBuffer(ADDR, (unsigned char[4]){0x0, c1, c2, c3}, 4);
}
inline void setContrast(char contrast) {
  cmd2(0x81, contrast);
}
inline void clear(int color = 0) {
  for (int i = 0; i < 1025; i++) {
    screen[i] = (color) ? 0xFF : 0x00;
  }
}
inline void draw() {
  // microbit::i2c::writeByte(ADDR, 0xB0);
  // microbit::i2c::writeByte(ADDR, 0x00);
  // microbit::i2c::writeByte(ADDR, 0x10);
  cmd1(0xB0);
  cmd1(0x00);
  cmd1(0x10);
  screen[0] = 0x40;
  microbit::i2c::writeBuffer(ADDR, screen, 1025);
}
inline void init() {
  cmd1(0xAE);
  cmd1(0xA4);
  cmd2(0xD5, 0xF0);
  cmd2(0xA8, 0x3F);
  cmd2(0xD3, 0x00);
  cmd1(0x00);
  cmd2(0x8D, 0x14);
  cmd2(0x20, 0x00);
  cmd3(0x21, 0x00, 0x7F);
  cmd3(0x22, 0x00, 0x3F);
  cmd1(0xA1);
  cmd1(0xC8);
  cmd2(0xDA, 0x12);
  cmd2(0x81, 0xFF);
  cmd2(0xD9, 0xF1);
  cmd2(0xDB, 0x40);
  cmd1(0xA6);
  cmd2(0xD6, 0x00);
  cmd1(0xAF);
  clear(0);
  draw();
}
inline void setPixel(int x, int y, int color) {
  if ((x > -1) && (x < 128) && (y > -1) && (y < 64)) {
    int index = ((y / 8) * 128) + x + 1;
    screen[index] = color ? screen[index] | (1 << (y % 8))
                          : screen[index] & ~(1 << (y % 8));
  }
}
inline int getPixel(int x, int y) {
  if ((x > -1) && (x < 128) && (y > -1) && (y < 64)) {
    int index = ((y / 8) * 128) + x + 1;
    return screen[index] & (1 << (y % 8)) ? 1 : 0;
  }
  return 0;
}
inline void togglePixel(int x, int y) {
  if ((x > -1) && (x < 128) && (y > -1) && (y < 64)) {
    int index = ((y / 8) * 128) + x + 1;
    screen[index] = !getPixel(x, y) ? screen[index] | (1 << (y % 8))
                                    : screen[index] & ~(1 << (y % 8));
  }
}
inline void drawRect(int x1, int y1, int x2, int y2, int color = 1,
                     int fill = 0, int toggle = 0) {
  if (fill) {
    for (int x = x1; x <= x2; x++) {
      for (int y = y1; y <= y2; y++) {
        if (toggle) {
          togglePixel(x, y);
        } else {
          setPixel(x, y, color);
        }
      }
    }
  } else {
    for (int x = x1; x <= x2; x++) {
      if (toggle) {
        togglePixel(x, y1);
      } else {
        setPixel(x, y1, color);
      }
    }
    for (int y = y1 + 1; y < y2; y++) {
      if (toggle) {
        togglePixel(x1, y);
      } else {
        setPixel(x1, y, color);
      }
    }
    for (int x = x1; x <= x2; x++) {
      if (toggle) {
        togglePixel(x, y2);
      } else {
        setPixel(x, y2, color);
      }
    }
    for (int y = y1 + 1; y < y2; y++) {
      if (toggle) {
        togglePixel(x2, y);
      } else {
        setPixel(x2, y, color);
      }
    }
  }
}
inline void drawLine(int x1, int y1, int x2, int y2, int color = 1,
                     int toggle = 0) {
  int dx = std::abs(x2 - x1);
  int dy = std::abs(y2 - y1);
  int sx = (x1 < x2) ? 1 : -1;
  int sy = (y1 < y2) ? 1 : -1;
  int err = dx - dy;
  while (1) {
    // microbit::serial::write(std::to_string(x1) + ' ' + std::to_string(y1));
    if (toggle) {
      togglePixel(x1, y1);
    } else {
      setPixel(x1, y1, color);
    }
    if (x1 == x2 && y1 == y2)
      break;
    int err2 = 2 * err;
    if (err2 > -dy) {
      err -= dy;
      x1 += sx;
    }
    if (err2 < dx) {
      err += dx;
      y1 += sy;
    }
  }
}
inline void drawText(const char* text, int x, int y, int color = 1,
                     int toggle = 0) {
  unsigned char font[95][11] = {
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x24, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x24, 0x24, 0x7E, 0x24, 0x7E, 0x24, 0x24, 0x00, 0x00, 0x00},
      {0x00, 0x08, 0x1C, 0x2A, 0x18, 0x0C, 0x2A, 0x1C, 0x08, 0x00, 0x00},
      {0x00, 0x24, 0x5C, 0x28, 0x08, 0x10, 0x14, 0x2A, 0x24, 0x00, 0x00},
      {0x00, 0x10, 0x28, 0x28, 0x10, 0x2A, 0x44, 0x44, 0x3A, 0x00, 0x00},
      {0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x04, 0x00},
      {0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x00},
      {0x00, 0x08, 0x2A, 0x1C, 0x1C, 0x2A, 0x08, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x10, 0x20, 0x20, 0x00},
      {0x00, 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x08, 0x18, 0x28, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x02, 0x0C, 0x02, 0x02, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x04, 0x0C, 0x14, 0x14, 0x24, 0x3E, 0x04, 0x04, 0x00, 0x00},
      {0x00, 0x3E, 0x20, 0x20, 0x3C, 0x22, 0x02, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x0C, 0x10, 0x20, 0x3C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x3E, 0x02, 0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x22, 0x1C, 0x22, 0x22, 0x22, 0x1C, 0x00, 0x00},
      {0x00, 0x1C, 0x22, 0x22, 0x22, 0x1E, 0x02, 0x04, 0x18, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x20, 0x00},
      {0x00, 0x00, 0x04, 0x08, 0x10, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x20, 0x10, 0x08, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00},
      {0x00, 0x38, 0x44, 0x08, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x4E, 0x52, 0x52, 0x4E, 0x40, 0x3C, 0x00, 0x00},
      {0x00, 0x18, 0x24, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x40, 0x40, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00},
      {0x00, 0x3E, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20, 0x3E, 0x00, 0x00},
      {0x00, 0x3E, 0x20, 0x20, 0x20, 0x3C, 0x20, 0x20, 0x20, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x40, 0x4E, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x00, 0x1E, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38, 0x00, 0x00},
      {0x00, 0x22, 0x24, 0x28, 0x30, 0x30, 0x28, 0x24, 0x22, 0x00, 0x00},
      {0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E, 0x00, 0x00},
      {0x00, 0x41, 0x63, 0x55, 0x55, 0x49, 0x49, 0x41, 0x41, 0x00, 0x00},
      {0x00, 0x42, 0x62, 0x52, 0x52, 0x4A, 0x4A, 0x46, 0x42, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40, 0x40, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x52, 0x4A, 0x3C, 0x02, 0x00},
      {0x00, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x48, 0x44, 0x42, 0x00, 0x00},
      {0x00, 0x3C, 0x42, 0x40, 0x3C, 0x02, 0x02, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x41, 0x41, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x41, 0x41, 0x41, 0x49, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00},
      {0x00, 0x63, 0x22, 0x14, 0x08, 0x08, 0x14, 0x22, 0x63, 0x00, 0x00},
      {0x00, 0x41, 0x41, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x7E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x7E, 0x00, 0x00},
      {0x1C, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1C, 0x00},
      {0x20, 0x20, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x04, 0x04, 0x00},
      {0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x38, 0x00},
      {0x00, 0x00, 0x00, 0x08, 0x14, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00},
      {0x08, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x02, 0x3E, 0x42, 0x42, 0x3D, 0x00, 0x00},
      {0x00, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x7C, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x40, 0x40, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x02, 0x02, 0x3A, 0x46, 0x42, 0x42, 0x42, 0x3E, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x7E, 0x40, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x0E, 0x10, 0x10, 0x3C, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00},
      {0x00, 0x00, 0x04, 0x38, 0x44, 0x44, 0x38, 0x40, 0x3C, 0x42, 0x3C},
      {0x00, 0x40, 0x40, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x08, 0x08, 0x00, 0x38, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x04, 0x04, 0x00, 0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x44, 0x38},
      {0x00, 0x40, 0x40, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00, 0x00},
      {0x00, 0x38, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x3E, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x76, 0x49, 0x49, 0x49, 0x41, 0x41, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x42, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x5C, 0x62, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x40},
      {0x00, 0x00, 0x00, 0x3E, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x02, 0x02},
      {0x00, 0x00, 0x00, 0x6E, 0x32, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x3C, 0x42, 0x3C, 0x02, 0x42, 0x3C, 0x00, 0x00},
      {0x00, 0x10, 0x10, 0x3C, 0x10, 0x10, 0x10, 0x12, 0x0C, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x46, 0x3A, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x22, 0x22, 0x14, 0x14, 0x08, 0x08, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x41, 0x41, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x66, 0x24, 0x18, 0x18, 0x24, 0x66, 0x00, 0x00},
      {0x00, 0x00, 0x00, 0x63, 0x22, 0x22, 0x14, 0x0C, 0x08, 0x48, 0x30},
      {0x00, 0x00, 0x00, 0x7E, 0x04, 0x08, 0x10, 0x20, 0x7E, 0x00, 0x00},
      {0x0C, 0x10, 0x10, 0x08, 0x30, 0x08, 0x10, 0x10, 0x10, 0x0C, 0x00},
      {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00},
      {0x30, 0x08, 0x08, 0x10, 0x0C, 0x10, 0x08, 0x08, 0x08, 0x30, 0x00},
      {0x00, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}};
  int line = 0;
  int lineStart = 0;
  for (int i = 0; text[i] != '\0'; i++) {
    if (text[i] == '\n') {
      line++;
      lineStart = i + 1;
    } else {
      for (int j = 0; j < 11; j++) {
        for (int k = 0; k < 8; k++) {
          if (font[text[i] - 32][j] & (0x01 << k)) {
            if (toggle) {
              togglePixel(x + ((i - lineStart) * 8) + (8 - k),
                          y + (line * 10) + j);
            } else {
              setPixel(x + ((i - lineStart) * 8) + (8 - k), y + (line * 10) + j,
                       color);
            }
          }
        }
      }
    }
  }
}
} // namespace oleda
